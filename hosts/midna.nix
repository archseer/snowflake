{config, lib, pkgs, ...}: {
  # hardware-configuration

  imports = [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix> ];
  boot.loader.grub.device = "/dev/vda";
  fileSystems."/" = { device = "/dev/vda1"; fsType = "ext4"; };

  # networking

  # This file was populated at runtime with the networking
  # details gathered from the active system.
  networking = {
    nameservers = [ "8.8.8.8" ];
    defaultGateway = "209.97.160.1";
    defaultGateway6 = "2400:6180:0:d1::1";
    dhcpcd.enable = false;
    usePredictableInterfaceNames = lib.mkForce true;
    interfaces = {
      eth0 = {
        ipv4.addresses = [
          { address="209.97.164.130"; prefixLength=20; }
{ address="10.15.0.5"; prefixLength=16; }
        ];
        ipv6.addresses = [
          { address="2400:6180:0:d1::6ec:3001"; prefixLength=64; }
{ address="fe80::bcb5:3bff:feb5:d4db"; prefixLength=64; }
        ];
        ipv4.routes = [ { address = "209.97.160.1"; prefixLength = 32; } ];
        ipv6.routes = [ { address = "2400:6180:0:d1::1"; prefixLength = 32; } ];
      };

    };
  };
  services.udev.extraRules = ''
    ATTR{address}=="be:b5:3b:b5:d4:db", NAME="eth0"
    ATTR{address}=="5a:60:60:8a:90:f2", NAME="eth1"
  '';

  boot.cleanTmpDir = true;

  # generated by nixos(-infect) ^

  # https://nixos.wiki/wiki/Storage_optimization
  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };

  swapDevices = [ { device = "/var/swapfile"; size = 2048; } ];

  networking = {
    hostName = "midna";

    firewall.allowPing = true;

    # Open ports in the firewall.
    firewall.allowedTCPPorts = [
      777
      80
      443
    ];
  };

  nixpkgs.config = {
    # I want unfree packages
    allowUnfree = true;
    # system = "x86_64-linux";
    # localSystem.system = "x86_64-linux";

    # packageOverrides = with pkgs; {
    #   neovim = pkgs.neovim.override {
    #     vimAlias = true;
    #   };
    # };
  };

  i18n = {
    defaultLocale = "en_US.UTF-8";
    # extraLocaleSettings = { LC_MESSAGES = "en_US.UTF-8"; LC_TIME = "nl_NL.UTF-8"; };
  };

  environment = {
    systemPackages = with pkgs; [
      direnv
      htop
      git
      tmux
      neovim
      wget
      fasd
      fzf
      ripgrep
    ];

    variables = {
      EDITOR = "nvim";
    };
  };

  services.openssh = {
    enable = true; 
    ports = [777];
    passwordAuthentication = false;
    challengeResponseAuthentication = false;
  };

  # ssh-agent
  # programs.ssh.startAgent = true

  # Don't forget to set a password with 'passwd'.
  users.users = {
    speed = {
      isNormalUser = true;
      extraGroups = ["wheel" "docker"];
      openssh.authorizedKeys.keys = ["ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINhYkvu/rVDYYlcM8Rq8HP3KPY2AX3mCvmyZ+/L1/yuh speed@hyrule.local"];
      shell = pkgs.zsh;
    };
  };

  # Already opens ports for us
  programs.mosh.enable = true;

  # Override vim with neovim
  programs.neovim.enable = true;

  # ZSH
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestions.enable = true;
    syntaxHighlighting.enable = true;
    ohMyZsh = {
      enable = true;
      plugins = ["git" "rust" "cargo" "docker" "gitignore" "systemd" "vi-mode" "fasd" ];
      customPkgs = with pkgs;[
        spaceship-prompt
        nix-zsh-completions
      ];
      theme = "spaceship";
    };
    interactiveShellInit = ''
      SPACESHIP_DOCKER_SHOW=false
      eval "$(direnv hook zsh)"
    '';
  };

  # Docker
  virtualisation.docker.enable = true;

  # Configure the email address used with Let's Encrypt.
  # This way you get renewal reminders (automated by NixOS) as well as expiration emails.
  security.acme = {
    acceptTerms = true;
    email = "blaz@mxxn.io";
  };

  # mxxn.io
  services.nginx = {
    enable = true;

    # Use recommended settings
    recommendedGzipSettings = true;
    recommendedOptimisation = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;

    # Only allow PFS-enabled ciphers with AES256
    sslCiphers = "AES256+EECDH:AES256+EDH:!aNULL";

    commonHttpConfig = ''
      # Add HSTS header with preloading to HTTPS requests.
      # Adding this header to HTTP requests is discouraged
      map $scheme $hsts_header {
          https   "max-age=31536000; includeSubdomains; preload";
      }
      add_header Strict-Transport-Security $hsts_header;

      # Enable CSP for your services.
      #add_header Content-Security-Policy "script-src 'self'; object-src 'none'; base-uri 'none';" always;

      # Minimize information leaked to other domains
      add_header 'Referrer-Policy' 'origin-when-cross-origin';

      # Disable embedding as a frame
      add_header X-Frame-Options DENY;

      # Prevent injection of code in other mime types (XSS Attacks)
      add_header X-Content-Type-Options nosniff;

      # Enable XSS protection of the browser.
      # May be unnecessary when CSP is configured properly (see above)
      add_header X-XSS-Protection "1; mode=block";

      # This might create errors
      proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
    '';

    virtualHosts."mxxn.io" = {
      enableACME = true;
      forceSSL = true;
      root = "/var/www/mxxn";
    };
  };
}
